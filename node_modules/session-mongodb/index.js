const cryptojs = require('crypto-js');
const mongoose = require('bluebird').promisifyAll(require('mongoose'));
const session = require('./session.model');

function randomString(length) {
    var text = "";
    var possible = "abcdefghijklmnopqrstuvwxyz0123456789";
  
    for (var i = 0; i < length; i++)
      text += possible.charAt(Math.floor(Math.random() * possible.length));
  
    return text;
}

module.exports = function (mongodbConnectionString, secret, cookieName = "sessionId") {
    mongoose.connect(mongodbConnectionString).then(idk => {}).catch(e => {throw e;});
    return function (req, res, next){
        var sessArray = {};
        var originalIp;
        originalIp = req.ip;
        const randomId = randomString(32);
        
        if(req.ips.length > 0){
            originalIp = req.ips[0];
        }

        var crypted = cryptojs.SHA512(cryptojs.SHA512(cryptojs.SHA512(cryptojs.SHA512(cryptojs.SHA512(cryptojs.SHA512(secret + originalIp + secret)))))).toString();

        sessArray.delete = function (variable) {
            if(variable == "set" || variable == "delete" || variable == "destroy") return;
            delete this[variable];
            session.findOneAndUpdate({ip: crypted, sessionId: req.cookies[cookieName]}, {$set: {variables: this}}).then(sess => {return;}).catch(e => {throw e;});
            return;
        };

        sessArray.destroy = function () {
            session.findOneAndDelete({ip: crypted, sessionId: req.cookies[cookieName]}).then(sess => {return;}).catch(e => {throw e;});
            return;
        };

        sessArray.set = function (variable, value) {
            if(variable == "set" || variable == "delete" || variable == "destroy") return;
            this[variable] = value;
            session.findOneAndUpdate({ip: crypted, sessionId: req.cookies[cookieName]}, {$set: {variables: this}}).then(sess => {return;}).catch(e => {throw e;});
            return;
        };

        if(typeof req.cookies[cookieName] != "undefined" && req.cookies[cookieName] != null) {
            session.findOne({sessionId: req.cookies[cookieName], ip: crypted}).then(sess => {
                if(typeof sess != "undefined" && sess != null){
                    for(var vari in sess.variables){
                        sessArray[vari] = sess.variables[vari];
                    }
                    req.session = sessArray;
                    return next();
                }
                session.create({ip: crypted , variables: {}, sessionId: randomId}).then(sess => {
                    req.session = sessArray;
                    res.cookie(cookieName, sess.sessionId);
                    return next();
                }).catch(e => {
                    throw e;
                });
                return;
            }).catch(e => {
                throw e;
            });
        }else{
            session.create({ip: crypted, variables: {}, sessionId: randomId}).then(sess => {
                req.session = sessArray;
                res.cookie(cookieName, sess.sessionId);
                return next();
            }).catch(e => {
                throw e;
            });
        }

    }
}